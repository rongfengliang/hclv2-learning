// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package conf generated by go-bindata.// sources:
// jobsconf/sqljobs.hcl
// jobsconf/sqljobs2.hcl
package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jobsconfSqljobsHcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xca\x4f\x52\x48\x49\x52\x50\xa8\xe6\x52\x00\x81\xe2\xc2\x9c\x62\x85\x94\xc4\x92\xc4\xa4\xc4\xe2\x54\x43\xa8\x20\x44\xbc\xa4\xb2\x20\x55\xc1\x56\x41\xa9\x38\x27\xbf\xbc\xb0\x34\xb5\xa8\xd2\x50\x09\x59\x5a\xc1\x56\xc1\xc6\x26\x38\xd0\x07\x2e\x06\x16\x4f\xcd\x49\x4d\x2e\x51\xd0\x52\x48\x2b\xca\xcf\x55\x28\x2d\x4e\x2d\x2a\x86\xcb\xc3\xd5\xd6\x62\xb1\xda\x08\xbf\xd5\x46\x54\xb3\xba\x96\x8b\x0b\x14\x04\x19\x25\x25\x05\xd8\x03\xc1\x18\xbf\x4b\x8c\x69\x18\x08\x26\xf8\xad\x36\xa1\x5e\x20\x00\x02\x00\x00\xff\xff\xf9\x0b\x54\x5f\x06\x02\x00\x00")

func jobsconfSqljobsHclBytes() ([]byte, error) {
	return bindataRead(
		_jobsconfSqljobsHcl,
		"jobsconf/sqljobs.hcl",
	)
}

func jobsconfSqljobsHcl() (*asset, error) {
	bytes, err := jobsconfSqljobsHclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jobsconf/sqljobs.hcl", size: 518, mode: os.FileMode(420), modTime: time.Unix(1594209054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jobsconfSqljobs2Hcl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xca\x4f\x52\x48\x49\x52\x50\xa8\xe6\x52\x00\x81\xe2\xc2\x9c\x62\x85\x94\xc4\x92\xc4\xa4\xc4\xe2\x54\x53\xa8\x20\x44\xbc\xa4\xb2\x20\x55\xc1\x56\x41\xa9\x38\x27\xbf\xbc\xb0\x34\xb5\xa8\xd2\x54\x09\x59\x5a\xc1\x56\xc1\xc6\x26\x38\xd0\x07\x2e\x06\x16\x4f\xcd\x49\x4d\x2e\x51\xd0\x52\x48\x2b\xca\xcf\x55\x28\x2d\x4e\x2d\x2a\x86\xcb\xc3\xd5\xd6\x62\xb1\xda\x0c\xbf\xd5\x66\x54\xb3\xba\x96\x8b\x0b\x14\x04\x19\x25\x25\x05\xd8\x03\xc1\x1c\xbf\x4b\xcc\x69\x18\x08\x16\xf8\xad\xb6\xa0\x5e\x20\x00\x02\x00\x00\xff\xff\x4f\xcb\x41\xcd\x06\x02\x00\x00")

func jobsconfSqljobs2HclBytes() ([]byte, error) {
	return bindataRead(
		_jobsconfSqljobs2Hcl,
		"jobsconf/sqljobs2.hcl",
	)
}

func jobsconfSqljobs2Hcl() (*asset, error) {
	bytes, err := jobsconfSqljobs2HclBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jobsconf/sqljobs2.hcl", size: 518, mode: os.FileMode(420), modTime: time.Unix(1594209054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"jobsconf/sqljobs.hcl":  jobsconfSqljobsHcl,
	"jobsconf/sqljobs2.hcl": jobsconfSqljobs2Hcl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"jobsconf": &bintree{nil, map[string]*bintree{
		"sqljobs.hcl":  &bintree{jobsconfSqljobsHcl, map[string]*bintree{}},
		"sqljobs2.hcl": &bintree{jobsconfSqljobs2Hcl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
